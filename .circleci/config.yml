version: 2.1

executors:
  docker:
    docker:
      - image: docker:24.0.0
        auth:
          username: hozanaci
          password: $DOCKERHUB_PASSWORD
  scanner:
    docker:
      - image: openjdk:11

commands:
  checkout-recursive:
    description: Recoursive checkout of all git submodules
    steps:
        - checkout
        - run:
            name: Checkout recoursively git submodules
            command: |
                chmod 600 deploy.key && eval "$(ssh-agent -s)" >> /dev/null && ssh-add -q deploy.key 
                git -c "core.sshCommand=ssh -v -o StrictHostKeyChecking=no -i deploy.key" submodule sync
                git -c "core.sshCommand=ssh -v -o StrictHostKeyChecking=no -i deploy.key" submodule update --recursive --init --remote
  clone-backend:
    description: Clone backend as a stantalone git project
    steps:
        - run:
            name: Clone backend as a standalone progect to get the right branch and history
            command: |
                chmod 600 deploy.key && eval "$(ssh-agent -s)" >> /dev/null && ssh-add -q deploy.key 
                git -c "core.sshCommand=ssh -v -o StrictHostKeyChecking=no -i deploy.key" clone git@github.com:hozana/backend.git /tmp
                cd /tmp
                git -c "core.sshCommand=ssh -v -o StrictHostKeyChecking=no -i deploy.key" checkout ${CIRCLE_SHA1}
                
  sonar-scanner:
    description: Check Code Quality
    parameters:
      sonar_server_url:
        type: string
        description: "URL of your SonarQube server. e.g.: http://my.sonarqube,server:9000"
        default: "$SONAR_SERVER_URL"
      sonar_token:
        description: "Authentication key (sonar.login paramter) to access SonarQube and perform analysis"
        type: string
        default: "$SONAR_TOKEN"
      sonar_project_key:
        description: "Project key"
        type: string
        default: "$SONAR_PROJECT_KEY"
      sonar_sources:
        description: "Where the files are located?"
        type: string
        default: "./src"

    steps:
        - checkout
        - run:
            name: Install Sonarqube scanner
            command: |
                wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873.zip
                unzip sonar-scanner-cli-4.2.0.1873.zip
        - run:
            name: Recover coverage folder from test job
            command: cp -rp /tmp/coverage/coverage /root/project/
        - run:
            name: Run Sonarscanner
            command: |
                curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash && . /root/.nvm/nvm.sh || true
                nvm install 18.16.0
                export SONAR_SCANNER_OPTS="-Xmx2048m"
                eval ./sonar-scanner-4.2.0.1873/bin/sonar-scanner \
                -Dsonar.projectKey=<< parameters.sonar_project_key >> \
                -Dsonar.host.url=<< parameters.sonar_server_url >> \
                -Dsonar.sources=<< parameters.sonar_sources >> \
                -Dsonar.token=<< parameters.sonar_token >> \
                -Dsonar.scm.provider=git \
                -Dsonar.skipPackageDesign=true \
                -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info \
                -Dsonar.javascript.file.suffixes=.js,.jsx \
                -Dsonar.scm.exclusions.disabled \
                -Dsonar.exclusions=node_modules/**,dist/**,mock/**,lambda/**,tests/**,coverage/**,config/**,src/app/\\\(routes\\\)/** \
                -X

jobs:
  build:
    docker:
      - image: docker:24.0.0
        auth:
          username: hozanaci
          password: $DOCKERHUB_PASSWORD
    environment: 
      DOCKER_IMAGE: hozanaci/php-api
      DOCKERHUB_USERNAME: hozanaci
    
    steps:
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk --update add --no-cache docker docker-cli-compose git
      - checkout-recursive
      - run:
          name: Login to DockerHub
          command: echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin
      - run:
          name: Build application Docker image
          command: docker build --no-cache -t $DOCKER_IMAGE:${CIRCLE_SHA1} .

      - run:
          name: Save image to dockerHub registry
          command: docker push $DOCKER_IMAGE:${CIRCLE_SHA1}

  phpunit_base: &phpunit_base
    executor: docker
    working_directory: /root/project/backend
    parallelism: 1
    shell: /bin/bash --login

    parameters:
      sonar_server_url:
        type: string
        description: "URL of your SonarQube server. e.g.: http://my.sonarqube,server:9000"
        default: "$SONAR_SERVER_URL"
      sonar_token:
        description: "Authentication key (sonar.login paramter) to access SonarQube and perform analysis"
        type: string
        default: "$SONAR_TOKEN"
      sonar_project_key:
        description: "Project key"
        type: string
        default: "$SONAR_PROJECT_KEY"
      sonar_sources:
        description: "Where the files are located?"
        type: string
        default: "./src"

    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results

    docker:
      - image: hozanaci/php-api:${CIRCLE_BRANCH}
        auth:
          username: hozanaci
          password: $DOCKERHUB_PASSWORD
        environment:
          HOZANA_DB_URL: mysql://hozana:hozana@127.0.0.7:3306/hozana
          HOZANA_CRM_DB_URL: mysql://hozana:hozana@127.0.0.1:3306/hozana_crm
          HOZANA_DB_E2E_URL: mysql://hozana:hozana@127.0.0.1:3306/hozana_e2e
          HOZANA_ELASTICSEARCH_HOST: 127.0.0.1
          HOZANA_REDIS_URI: redis://127.0.0.1?persistent=1
          APP_ENV: ci
          DUMP_MAILS: false
          XDEBUG_MODE: coverage
      - image: mysql:8.0
        command: mysqld --sql-mode="STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ENGINE_SUBSTITUTION" --default-authentication-plugin=mysql_native_password
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_USER: hozana
          MYSQL_PASSWORD: hozana
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: hozana
          MYSQL_ROOT_HOST: '%'
          MYSQL_ROOT_PASSWORD: root
          #tmpfs:
          #    - /var/lib/mysql
      - image: hozanaci/elasticsearch:latest
        environment:
          ES_JAVA_OPTS: -Xms256m -Xmx256m
      - image: redis:5
    steps: 
      - run: echo test

    # This is the generic phpunit job, there is a second one configured slightly differently (phpunit_coverage).
    # Pay attention to changes you make to common phpunit setup (phpunit_base) and in the two sections below.
    # phpunit job executes on all branches exept master and prod. phpunit_coverage runs only on master and prod
    # and requires a large instance in the CI.
  phpunit:
    <<: *phpunit_base
    steps:
      - checkout-recursive
      - run: 
          name: Move around codebase to match test environment
          command: |
            cd .. && mv backend/backend /tmp/backend && mv ../project/backend /tmp/project 
            rm -rf /root/project
            mv /tmp/project /root/
            mv /tmp/backend /root/project/
      - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS

      # Restore the dependency cache
      - restore_cache:
          keys:
            # This branch if available
            - v1-dep-{{ .Branch }}-
            # Default branch if not
            - v1-dep-develop-
            # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
            - v1-dep-

      # Requirements
      - run: apt -y update
      - run: apt install -y default-mysql-client unzip

      - run: composer install

      # Save dependency cache
      - save_cache:
          key: v1-dep-{{ .Branch }}-{{ epoch }}
          paths:
            - vendor
            - ~/virtualenvs
            - ~/.composer
            - /tmp/phpstan/cache/

      # Mails prerequisites
      - run: .circleci/init/init-mails.sh

      # MySQL configuration
      - run: .circleci/init/init-mysql.sh

      # Init Elasticsearch
      - run: bin/console api:elasticsearch:init

      # Real tests
      - run:
          name: Run phpunit
          command: |
            mkdir -p ~/phpunit
            ./bin/phpunit -d memory_limit=2700M --log-junit /tmp/circleci-test-results/junit.xml
          when: always

      # Save test results
      - store_test_results:
          path: /tmp/circleci-test-results

      # Save artifacts
      - store_artifacts:
          path: /tmp/circleci-artifacts
      - store_artifacts:
          path: var/log/test.log
      - store_artifacts:
          path: /tmp/circleci-test-results

      # Check OpenApi json consistency
      - run: bin/console nelmio:apidoc:dump --format=json > last-open-api.json
      - run: cmp last-open-api.json open-api.json

  phpunit_coverage:
    <<: *phpunit_base
    resource_class: large
    steps:
      - checkout-recursive
      - run: 
          name: Move around codebase to match test environment
          command: |
            cd .. && mv backend/backend /tmp/backend && mv ../project/backend /tmp/project 
            rm -rf /root/project
            mv /tmp/project /root/
            mv /tmp/backend /root/project/
      - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS

      # Restore the dependency cache
      - restore_cache:
          keys:
            # This branch if available
            - v1-dep-{{ .Branch }}-
            # Default branch if not
            - v1-dep-develop-
            # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
            - v1-dep-

      # Requirements
      - run: apt -y update && apt install -y default-mysql-client unzip default-jdk

      - run: composer install

      # Save dependency cache
      - save_cache:
          key: v1-dep-{{ .Branch }}-{{ epoch }}
          paths:
            - vendor
            - ~/virtualenvs
            - ~/.composer
            - /tmp/phpstan/cache/

      # Mails prerequisites
      - run: .circleci/init/init-mails.sh

      # MySQL configuration
      - run: .circleci/init/init-mysql.sh

      # Init Elasticsearch
      - run: bin/console api:elasticsearch:init

      # Real tests
      - run:
          command: |
            mkdir -p ~/phpunit
            ./bin/phpunit -d memory_limit=10700M --verbose --coverage-clover /tmp/coverage-result.xml --log-junit /tmp/circleci-test-results/junit.xml
          when: always

      # feed raports to SonarQube
      - run:
          name: Install Sonarqube scanner
          command: |
            curl -o sonar-scanner-cli-4.2.0.1873.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873.zip
            unzip sonar-scanner-cli-4.2.0.1873.zip
      - run:
          name: Run Sonarscanner
          command: |
            export SONAR_SCANNER_OPTS="-Xmx2048m"
            eval ./sonar-scanner-4.2.0.1873/bin/sonar-scanner \
            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
            -Dsonar.host.url="${SONAR_HOST_URL}" \
            -Dsonar.sources=./ \
            -Dsonar.exclusions=vendor/**,tests/**,**/Migrations/** \
            -Dsonar.token=${SONAR_TOKEN} \
            -Dsonar.php.tests.reportPath=/tmp/circleci-test-results/junit.xml \
            -Dsonar.php.coverage.reportPaths=/tmp/coverage-result.xml \
            -Dsonar.tests=tests

      # Save test results
      - store_test_results:
          path: /tmp/circleci-test-results

      # Save artifacts
      - store_artifacts:
          path: /tmp/circleci-artifacts
      - store_artifacts:
          path: var/log/test.log
      - store_artifacts:
          path: /tmp/circleci-test-results

  sonar-scanner:
    executor: scanner
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp/coverage
      - sonar-scanner
  
  deploy:
    docker:
      - image: docker:24.0.0
        auth:
          username: hozanaci
          password: $DOCKERHUB_PASSWORD
    environment: 
      DOCKER_IMAGE: hozanaci/php-api
      DOCKERHUB_USERNAME: hozanaci
    
    steps:
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk --update add --no-cache docker docker-cli-compose git
      - run:
          name: Login into DockerHub
          command: |
            echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin
      - run:
          name: Recover release candidate
          command: |
            docker pull $DOCKER_IMAGE:${CIRCLE_SHA1}
      - run:
          name: Publish image to :latest tag
          command: |
            docker tag $DOCKER_IMAGE:${CIRCLE_SHA1} $DOCKER_IMAGE:${CIRCLE_BRANCH}
            docker push $DOCKER_IMAGE:${CIRCLE_BRANCH}

  linter:
    docker:
      - image: hozanaci/php-api:${CIRCLE_BRANCH}
        auth:
          username: hozanaci
          password: $DOCKERHUB_PASSWORD
    resource_class: small
    steps:
      - checkout-recursive
      - run: 
          name: Install PHP-CS-Fixer v3.5.0
          command: |
            cd backend 
            curl -o php-cs-fixer.phar https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v3.5.0/php-cs-fixer.phar
            chmod +x php-cs-fixer.phar
      # Linter
      - run: 
          name: Run linter
          command: cd backend && ./php-cs-fixer.phar -vvv --no-ansi fix --dry-run --diff

  static_analysis:
    docker:
      - image: hozanaci/php-api:${CIRCLE_BRANCH}
        auth:
          username: hozanaci
          password: $DOCKERHUB_PASSWORD
    resource_class: medium
    steps:
      - checkout-recursive
      # Restore the dependency cache
      - restore_cache:
          keys:
            # This branch if available
            - v1-dep-{{ .Branch }}-
            # Default branch if not
            - v1-dep-develop-
            # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
            - v1-dep-
      - run: 
          name: Run composer install (really?)
          command: cd backend && composer install
      # phpstan
      - run:
          name: Run PHPStan
          command: cd backend && php -d memory_limit=2G ./vendor/bin/phpstan analyse -c phpstan.neon
      # rector
      - run:
          name: Run rector
          command: cd backend && php -d memory_limit=2G ./vendor/bin/rector process src --dry-run

  translation_consistency:
    working_directory: /data/code
    parallelism: 1
    docker:
      - image: hozanaci/php-api:${CIRCLE_BRANCH}
        auth:
          username: hozanaci
          password: $DOCKERHUB_PASSWORD
    resource_class: small
    steps:
      - run: composer install
      - run: .circleci/init/init-mails.sh
      - run: bin/console api:maintenance:mail:checktranslations

# Orchestrate our job run sequence
workflows:
  build_and_test:
    jobs:
      - phpunit:
          requires:
            - build
          filters:
            branches:
              ignore:
                - prod
                - master
      - phpunit_coverage:
          requires:
            - build
          filters:
            branches:
              only:
                - prod
                - master
      - build
      - deploy:
          #requires:
            - build
            #- linter
            #- static_analysis
            #- translation_consistency
          filters:
            branches:
              only:
                - develop
                - master

      #- sonar-scanner:
      #    context: lineclass
      #    requires:
      #      - test
      #    filters:
      #      branches:
      #        only: 
      #          - develop
      #          - master
      - linter:
          requires:
            - build
      - static_analysis: 
          requires:
            - build
      - translation_consistency:
          requires:
            - build
          filters:
            branches:
              only:
                - once-fixed
                #- prod
                #- master